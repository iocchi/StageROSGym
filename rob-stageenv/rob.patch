diff --git a/launch/stage_map.launch b/launch/stage_map.launch
index 6c15940..a1e63c5 100644
--- a/launch/stage_map.launch
+++ b/launch/stage_map.launch
@@ -12,7 +12,7 @@
   <param name="/use_sim_time" value="true"/>
 
   <node pkg="stage_environments" type="stagerosPeople" name="stageros" args="$(arg stageros_args) $(arg world_file)" respawn="false" required="true" output="screen">
-    <param name="base_watchdog_timeout" value="0.2"/>
+    <param name="base_watchdog_timeout" value="0.5"/>
     <param name="base_frame" value="$(arg base_frame)"/>
     <param name="laser_topic" value="$(arg laser_topic)"/>
     <param name="laser_frame" value="$(arg laser_frame)"/>
diff --git a/src/stagerosPeople.cpp b/src/stagerosPeople.cpp
index 96f6ef4..5dc90a3 100644
--- a/src/stagerosPeople.cpp
+++ b/src/stagerosPeople.cpp
@@ -709,6 +709,7 @@ StageNode::WorldCallback()
             memcpy(&(this->imageMsgs[r].data[y*linewidth]),&(this->imageMsgs[r].data[(height-y)*linewidth]),linewidth);
             memcpy(&(this->imageMsgs[r].data[(height-y)*linewidth]),temp,linewidth);
        }
+			 delete[] temp;
 
         this->imageMsgs[r].header.frame_id = mapName(this->camera_frame, r,static_cast<Stg::Model*>(positionmodels[r]));
         this->imageMsgs[r].header.stamp = sim_time;
@@ -761,6 +762,7 @@ StageNode::WorldCallback()
            memcpy(&(this->depthMsgs[r].data[y*linewidth]),&(this->depthMsgs[r].data[(height-y)*linewidth]),linewidth);
            memcpy(&(this->depthMsgs[r].data[(height-y)*linewidth]),temp,linewidth);
       }
+			delete[] temp;
 
       this->depthMsgs[r].header.frame_id = mapName(this->camera_frame, r,static_cast<Stg::Model*>(positionmodels[r]));
       this->depthMsgs[r].header.stamp = sim_time;
